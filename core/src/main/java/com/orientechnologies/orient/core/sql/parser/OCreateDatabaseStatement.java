/* Generated By:JJTree: Do not edit this line. OCreateDatabaseStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OServerCommandContext;
import com.orientechnologies.orient.core.db.*;
import com.orientechnologies.orient.core.exception.OCommandExecutionException;
import com.orientechnologies.orient.core.sql.executor.OInternalResultSet;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.OResultSet;
import java.util.Locale;

public class OCreateDatabaseStatement extends OSimpleExecServerStatement {

  protected OIdentifier name;
  protected OIdentifier type;
  protected boolean ifNotExists = false;
  protected OJson config;

  public OCreateDatabaseStatement(int id) {
    super(id);
  }

  public OCreateDatabaseStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OResultSet executeSimple(OServerCommandContext ctx) {
    OrientDBInternal server = ctx.getServer();
    OResultInternal result = new OResultInternal();
    result.setProperty("operation", "create database");
    result.setProperty("name", name.getStringValue());

    ODatabaseType dbType;
    try {

      dbType = ODatabaseType.valueOf(type.getStringValue().toUpperCase(Locale.ENGLISH));
    } catch (IllegalArgumentException ex) {
      throw new OCommandExecutionException("Invalid db type: " + type.getStringValue());
    }
    if (ifNotExists && server.exists(name.getStringValue(), null, null)) {
      result.setProperty("created", false);
      result.setProperty("existing", true);
    } else {
      try {
        if (config == null) {
          server.create(name.getStringValue(), null, null, dbType);
        } else {
          server.create(name.getStringValue(), null, null, dbType, toOrientDBConfig(config, ctx));
        }
        result.setProperty("created", true);
      } catch (Exception e) {
        throw new OCommandExecutionException(
            "Could not create database " + type.getStringValue() + ":" + e.getMessage());
      }
    }

    OInternalResultSet rs = new OInternalResultSet();
    rs.add(result);
    return rs;
  }

  private OrientDBConfig toOrientDBConfig(OJson config, OServerCommandContext ctx) {
    OrientDBConfigBuilder builder = new OrientDBConfigBuilder();
    builder.fromMap(config.toMap(new OResultInternal(), ctx));
    return builder.build();
  }

  /** Accept the visitor. */
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=99888a0f8bb929dce0904816cd51fefe (do not edit this line) */
