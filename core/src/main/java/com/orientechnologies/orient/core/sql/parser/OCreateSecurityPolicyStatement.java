/* Generated By:JJTree: Do not edit this line. OCreateSecurityPolicyStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseInternal;
import com.orientechnologies.orient.core.db.ODatabaseSession;
import com.orientechnologies.orient.core.metadata.security.OSecurityInternal;
import com.orientechnologies.orient.core.metadata.security.OSecurityPolicy;
import com.orientechnologies.orient.core.sql.executor.OInternalResultSet;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.OResultSet;

import java.util.Map;

public class OCreateSecurityPolicyStatement extends OSimpleExecStatement {

  protected OIdentifier name;

  protected OBooleanExpression create;
  protected OBooleanExpression read;
  protected OBooleanExpression beforeUpdate;
  protected OBooleanExpression afterUpdate;
  protected OBooleanExpression delete;
  protected OBooleanExpression execute;

  public OCreateSecurityPolicyStatement(int id) {
    super(id);
  }

  public OCreateSecurityPolicyStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OResultSet executeSimple(OCommandContext ctx) {
    ODatabaseSession db = (ODatabaseSession) ctx.getDatabase();
    OSecurityInternal security = ((ODatabaseInternal) db).getSharedContext().getSecurity();
    OSecurityPolicy policy = security.createSecurityPolicy(db, name.getStringValue());
    policy.setActive(true);
    if (create != null) {
      policy.setCreateRule(create.toString());
    }
    if (read != null) {
      policy.setReadRule(read.toString());
    }
    if (beforeUpdate != null) {
      policy.setBeforeUpdateRule(beforeUpdate.toString());
    }
    if (afterUpdate != null) {
      policy.setAfterUpdateRule(afterUpdate.toString());
    }
    if (delete != null) {
      policy.setDeleteRule(delete.toString());
    }
    if (execute != null) {
      policy.setExecuteRule(execute.toString());
    }
    security.saveSecurityPolicy(db, policy);


    OResultInternal result = new OResultInternal();
    result.setProperty("operation", "create security policy");
    result.setProperty("name", name.getStringValue());
    OInternalResultSet rs = new OInternalResultSet();
    rs.add(result);
    return rs;

  }


  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }


  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE SECURITY POLICY ");
    name.toString(params, builder);

    boolean first = true;
    if (create != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("CREATE = (");
      create.toString(params, builder);
      builder.append(")");
      first = false;
    }

    if (read != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("READ = (");
      read.toString(params, builder);
      builder.append(")");
      first = false;
    }
    if (beforeUpdate != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("BEFORE UPDATE = (");
      beforeUpdate.toString(params, builder);
      builder.append(")");
      first = false;
    }

    if (afterUpdate != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("AFTER UPDATE = (");
      afterUpdate.toString(params, builder);
      builder.append(")");
      first = false;
    }
    if (delete != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("DELETE = (");
      delete.toString(params, builder);
      builder.append(")");
      first = false;
    }
    if (execute != null) {
      if (first) {
        builder.append(" SET ");
      } else {
        builder.append(", ");
      }
      builder.append("EXECUTE = (");
      execute.toString(params, builder);
      builder.append(")");
      first = false;
    }
  }
}
/* JavaCC - OriginalChecksum=f41480f6734998f6eac27242db146d09 (do not edit this line) */
