/* Generated By:JJTree: Do not edit this line. OAlterSequenceStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.document.ODatabaseDocument;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.exception.OCommandExecutionException;
import com.orientechnologies.orient.core.metadata.sequence.OSequence;
import com.orientechnologies.orient.core.metadata.sequence.SequenceOrderType;
import com.orientechnologies.orient.core.sql.executor.OInternalResultSet;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;
import com.orientechnologies.orient.core.sql.executor.OResultSet;

import java.util.Map;
import java.util.Objects;

public class OAlterSequenceStatement extends ODDLStatement {
  OIdentifier name;
  OExpression start;
  OExpression increment;
  OExpression cache;
  Boolean     positive;
  Boolean     cyclic;
  OExpression minValue;
  OExpression maxValue;

  public OAlterSequenceStatement(int id) {
    super(id);
  }

  public OAlterSequenceStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override
  public OResultSet executeDDL(OCommandContext ctx) {

    String sequenceName = name.getStringValue();

    if (sequenceName == null) {
      throw new OCommandExecutionException("Cannot execute the command because it has not been parsed yet");
    }
    final ODatabaseDocument database = getDatabase();
    OSequence sequence = database.getMetadata().getSequenceLibrary().getSequence(sequenceName);
    if (sequence == null) {
      throw new OCommandExecutionException("Sequence not found: " + sequenceName);
    }

    OSequence.CreateParams params = new OSequence.CreateParams();
    params.resetNull();

    if (start != null) {
      Object val = start.execute((OIdentifiable) null, ctx);
      if (!(val instanceof Number)) {
        throw new OCommandExecutionException("invalid start value for a sequence: " + val);
      }
      params.start = ((Number) val).longValue();
    }
    if (increment != null) {
      Object val = increment.execute((OIdentifiable) null, ctx);
      if (!(val instanceof Number)) {
        throw new OCommandExecutionException("invalid increment value for a sequence: " + val);
      }
      params.increment = ((Number) val).intValue();
    }
    if (cache != null) {
      Object val = cache.execute((OIdentifiable) null, ctx);
      if (!(val instanceof Number)) {
        throw new OCommandExecutionException("invalid cache value for a sequence: " + val);
      }
      params.cacheSize = ((Number) val).intValue();
    }
    if (positive != null) {      
      params.orderType = positive == true ? SequenceOrderType.ORDER_POSITIVE : SequenceOrderType.ORDER_NEGATIVE;
    }
    if (cyclic != null){
      params.recyclable = cyclic;
    }
    if (minValue != null){
      Object val = minValue.execute((OIdentifiable) null, ctx);
      if (!(val instanceof Number)) {
        throw new OCommandExecutionException("invalid cache value for a sequence: " + val);
      }
      params.limitValue = ((Number) val).intValue();
    }
    if (maxValue != null){
      Object val = maxValue.execute((OIdentifiable) null, ctx);
      if (!(val instanceof Number)) {
        throw new OCommandExecutionException("invalid cache value for a sequence: " + val);
      }
      params.limitValue = ((Number) val).intValue();
    }

    sequence.updateParams(params);
    sequence.save(database);

    OInternalResultSet result = new OInternalResultSet();
    OResultInternal item = new OResultInternal();
    item.setProperty("operation", "alter sequence");
    item.setProperty("sequenceName", sequenceName);
    if (params.start != null){
      item.setProperty("start", params.start);
    }
    if (params.increment != null){
      item.setProperty("increment", params.increment);
    }
    if (params.cacheSize != null){
      item.setProperty("cacheSize", params.cacheSize);
    }
    if (params.limitValue != null){
      item.setProperty("limitValue", params.limitValue);
    }
    if (params.orderType != null){
      item.setProperty("orderType", params.orderType.toString());
    }
    if (params.recyclable != null){
      item.setProperty("recycable", params.recyclable);
    }
    result.add(item);
    return result;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("ALTER SEQUENCE ");
    name.toString(params, builder);

    if (start != null) {
      builder.append(" START ");
      start.toString(params, builder);
    }
    if (increment != null) {
      builder.append(" INCREMENT ");
      increment.toString(params, builder);
    }
    if (cache != null) {
      builder.append(" CACHE ");
      cache.toString(params, builder);
    }
    if (positive != null){
      String appendString;
      appendString = positive == true ? " ASC" : " DESC";
      builder.append(appendString);
    }
    if (cyclic != null){
      if (cyclic){
        builder.append(" CYCLE");
      }
    }
    if (minValue != null){
      builder.append(" MINVALUE ");
      minValue.toString(params, builder);
    }
    if (maxValue != null){
      builder.append(" MAXVALUE ");
      maxValue.toString(params, builder);
    }
  }

  @Override
  public OAlterSequenceStatement copy() {
    OAlterSequenceStatement result = new OAlterSequenceStatement(-1);
    result.name = name == null ? null : name.copy();
    result.start = start == null ? null : start.copy();
    result.increment = increment == null ? null : increment.copy();
    result.cache = cache == null ? null : cache.copy();
    result.positive = positive;
    result.cyclic = cyclic;
    result.minValue = minValue == null ? null : minValue.copy();
    result.maxValue = maxValue == null ? null : maxValue.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    OAlterSequenceStatement that = (OAlterSequenceStatement) o;

    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (start != null ? !start.equals(that.start) : that.start != null)
      return false;
    if (increment != null ? !increment.equals(that.increment) : that.increment != null)
      return false;
    if (cache != null ? !cache.equals(that.cache) : that.cache != null)
      return false;
    if (!Objects.equals(positive, that.positive)){
      return false;
    }
    if (!Objects.equals(cyclic, that.cyclic)){
      return false;
    }
    if (!Objects.equals(minValue, that.minValue)){
      return false;
    }
    if (Objects.equals(maxValue, that.maxValue)){
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (start != null ? start.hashCode() : 0);
    result = 31 * result + (increment != null ? increment.hashCode() : 0);
    result = 31 * result + (cache != null ? cache.hashCode() : 0);
    result = 31 * result + (positive != null ? positive.hashCode() : 0);
    result = 31 * result + (cyclic != null ? cyclic.hashCode() : 0);
    result = 31 * result + (minValue != null ? minValue.hashCode() : 0);
    result = 31 * result + (maxValue != null ? maxValue.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=def62b1d04db5223307fe51873a9edd0 (do not edit this line) */
